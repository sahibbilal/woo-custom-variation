<?phpclass WCV{	/**	 * This is a unique identifier of plugin.	 */	protected $plugin_name;	protected $version;	/**	 * The core functionality of the plugin.	 *	 */	public function __construct() {		if ( defined( 'WCV_VERSION' ) ) {			$this->version = WCV_VERSION;		} else {			$this->version = '1.0';		}		$this->plugin_name = 'WCV';		$this->load_dependencies();        $this->define_admin_hooks();        $this->include_public_hooks();	}	/**	 * Load the required dependencies.	 *	 * Include the required files:	 *	 */	private function load_dependencies() {        require_once plugin_dir_path( dirname( __FILE__ ) ) . 'admin/class-wcv-admin.php';        require_once plugin_dir_path( dirname( __FILE__ ) ) . 'public/class-wcv-public.php';        require_once plugin_dir_path( dirname( __FILE__ ) ) . 'includes/class-wcv-loader.php';		$this->loader = new WCV_Loader();	}	/**	 * Register admin hooks	 * of the plugin.	 *	 */	private function define_admin_hooks() {		$plugin_admin = new WCV_Admin( $this->get_plugin_name(), $this->get_version() );//        $this->loader->add_action( 'admin_enqueue_scripts', $plugin_admin, 'enqueue_styles' );//        $this->loader->add_action( 'admin_enqueue_scripts', $plugin_admin, 'enqueue_scripts' );	}	/**	 * Register public hooks	 *	 */	private function include_public_hooks() {		$plugin_public = new WCV_Public( $this->get_plugin_name(), $this->get_version() );        $this->loader->add_action( 'wp_enqueue_scripts', $plugin_public, 'enqueue_styles' );        $this->loader->add_action( 'wp_enqueue_scripts', $plugin_public, 'enqueue_scripts', 30 );        $this->loader->add_action( 'wp_footer', $plugin_public, 'sb_wp_footer_function', 99 );        $this->loader->add_action( 'woocommerce_before_add_to_cart_form', $plugin_public, 'sb_woocommerce_before_add_to_cart_button_function', 99 );        $this->loader->add_action( 'wp_ajax_sb_get_variation_id', $plugin_public, 'sb_get_variation_id', 99 );        $this->loader->add_action( 'wp_ajax_nopriv_sb_get_variation_id', $plugin_public, 'sb_get_variation_id', 99 );        $this->loader->add_action( 'wp_ajax_sb_get_variations', $plugin_public, 'sb_get_variations', 99 );        $this->loader->add_action( 'wp_ajax_nopriv_sb_get_variations', $plugin_public, 'sb_get_variations', 99 );	}    /**     * Run the loader.     *     */    public function max_run() {        $this->loader->max_run();    }	/**	 * The name of the plugin	 *	 */	public function get_plugin_name() {		return $this->plugin_name;	}	/**	 * The version number of the plugin.	 */	public function get_version() {		return $this->version;	}}